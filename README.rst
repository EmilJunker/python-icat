python-icat - Python interface to ICAT and IDS
==============================================

This package provides a collection of modules for writing Python
programs that access an `ICAT`_ service using the SOAP interface.  It
is based on Suds and extends it with ICAT specific features.

Download
--------

The latest release version and online documentation can be found at
the home page of the package at

    https://icatproject.org/user-documentation/python-icat/


System requirements
-------------------

Python:

+ 2.7, or 3.3 and newer.

Required Library packages:

+ Suds, either the original version or the `fork by Jurko
  Gospodnetić`__.  The latter is recommended as the original version
  is not maintained any more and contains bugs.  Python 3 requires the
  jurko fork.

Optional library packages, only needed to use certain extra features,
not required to install or use python-icat itself:

+ `PyYAML`_

  Only needed to use the YAML backend of icatdump.py and icatingest.py
  and to run the example scripts (see below).

+ `lxml`_

  Only needed to use the XML backend of icatdump.py and icatingest.py.

+ `Requests`_

  Only needed for the example scripts using the ICAT RESTful
  interface, icatexport.py and icatimport.py.

+ `setuptools_scm`_

  The version number is managed using this package.  All source
  distributions add a static text file with the version number and
  fall back using that if `setuptools_scm` is not available.  So this
  package is only needed to build out of the plain development source
  tree as cloned from GitHub.

+ `pytest`_ >= 3.1.0

  Only if you want to run the tests.

+ `pytest-dependency`_ >= 0.2

  Only if you want to run the tests.

+ `distutils-pytest`_

  Only if you want to run the tests.

.. __: `Suds jurko`_


Installation
------------

python-icat uses the distutils Python standard library package and
follows its conventions of packaging source distributions.  See the
documentation on `Installing Python Modules`_ for details or to
customize the install process.

1. Download the sources, unpack, and change into the source directory.

2. Build::

     $ python setup.py build

3. Test (optional, see below)::

     $ python setup.py test

4. Install::

     $ python setup.py install

The last step might require admin privileges in order to write into
the site-packages directory of your Python installation.


Documentation
-------------

The directory doc/html in the source distribution contains the API
documentation of python-icat in HTML form generated by Sphinx.  The
starting point is doc/html/index.html.

Example scripts can be found in doc/examples.  This is mostly an
unsorted collection of test scripts that I initially wrote for myself
to try things out.

Almost all scripts use example_data.yaml as input for test data.  Of
course for real production, the input will come from different
sources, out of some workflow from the site.  But this would be
dynamic and site specific and thus not suitable, neither for testing
nor for the inclusion into example scripts.  So its easier to have
just one blob of dummy input data in one single file.  That is also
the reason why the example scripts require PyYAML.


Building from development sources
---------------------------------

For production use, it is always recommended to use the latest release
version from the home page, see above.  If you need some not yet
released bleeding edge feature or if you want to participate in the
development, you may also clone the `source repository from GitHub`__.

Note that some source files are dynamically created and thus missing
in the development sources.  If you want to build from the development
sources, you may use the provided Makefile.  E.g. type ``make build``,
``make test``, and ``make sdist``.

.. __: `GitHub repository`_


Test
----

There is no need to run the tests at all.  The test suite is mostly
useful to the maintainer of python-icat.

Most tests require a test ICAT server to talk to.  These tests are
disabled by default, unless you configure such a test server.  To do
so, place an icat.cfg file into tests/data.  This file must have at
least the configuration sections "root", "useroffice", "acord",
"ahau", "jbotu", "jdoe", "nbour", and "rbeck" with the options and
credentials to access the test server as the respective user.  See
doc/examples for an example.  Obviously, this implies that your
authentication plugin must also have these users configured.

**WARNING**: the tests are destructive!  They will delete all content
from the test server and replace it with example content.  Do not
configure the tests to access a production server!

You can safely run the tests without configuring any test server.  You
will just get many skipped tests then.


Bugs and limitations
--------------------

+ If supported by the ICAT server (icat.server 4.9.0 and newer), the
  icat.config module queries the server for information on available
  authenticators and the credential keys they require for login.  The
  configuration variables for these keys are then adapted accordingly.
  Therefore, the set of configuration variables depends on the ICAT
  server and the available authentication plugins.  But the help
  message displayed by the `--help` command line option is static.  As
  a result, this help message is not always accurate.  When connecting
  to a specific ICAT service, it may happen that different
  configuration variables and thus command line arguments are
  effective then those shown by the generic help message.

+ For Python 2, the return value of the string representation operator
  of class Query may be a Unicode object if any of the conditions
  contains Unicode.  This violates the specification that requires the
  result to be a string object.  But it makes non-ascii characters in
  queries work.  A formal correct implementation would be much more
  cumbersome and less useful.  For Python 3, there is no distinction
  between Unicode and string objects anyway.

+ The entries in the no_proxy configuration variable are matched
  against the host part of the URL by simple string comparison.  The
  host is excluded from proxy use if its name ends with any item in
  no_proxy.  It is not checked whether the matching part starts with a
  domain component.  E.g. setting no_proxy=ion.example.org will not
  only exclude icat.ion.example.org, but also lion.example.org,
  although the latter is not in the ion.example.org domain.  IP
  addresses are not supported in no_proxy.  This is a limitation in
  the implementation of the underlying Python library.

+ There is a bug in the original version of Suds: the way it deals
  with datetime values is broken.  Suds converts all incoming datetime
  values from the server into what it believes to be local time and
  then throws all time zone information away.  The problem is that
  Suds' conception of the local time is flawed such that the result
  from this conversion may be wrong.  There is no reliable way to fix
  the values afterwards.

  One can work around this by setting the local time zone to UTC.
  (The conversion to UTC is done correctly in Suds.)  As a result, all
  datetime values retrieved from the server will be in UTC, which at
  least is well defined.  You may either set the environment variable
  TZ to 'UTC' before calling your script or add the lines ::

    import os
    os.environ['TZ'] = 'UTC'

  at the beginning of your script.  This must be set before importing
  other modules (in particular suds) in order to be effective.

  As a general rule, python-icat assumes all datetime values that do
  not contain time zone information to be UTC.

  Note that the bug is fixed in the fork by Jurko Gospodnetić which is
  recommended anyway.


Version numbering
-----------------

Version numbers of python-icat comply with Python standards as defined
in `PEP 440`_.  They try to adhere to the principles of `Semantic
Versioning`_, but may deviate from the formatting defined therein
when it is incompatible with PEP 440.

Copyright and License
---------------------

Copyright 2013-2019
Helmholtz-Zentrum Berlin für Materialien und Energie GmbH

Licensed under the Apache License, Version 2.0 (the "License"); you
may not use this file except in compliance with the License.  You may
obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied.  See the License for the specific language governing
permissions and limitations under the License.


.. _ICAT: https://icatproject.org/
.. _Suds jurko: https://bitbucket.org/jurko/suds
.. _PyYAML: https://github.com/yaml/pyyaml
.. _lxml: https://lxml.de/
.. _Requests: http://python-requests.org/
.. _setuptools_scm: https://github.com/pypa/setuptools_scm/
.. _pytest: https://docs.pytest.org/en/latest/
.. _pytest-dependency: https://pypi.python.org/pypi/pytest_dependency/
.. _distutils-pytest: https://github.com/RKrahl/distutils-pytest
.. _Installing Python Modules: https://docs.python.org/2.7/install/
.. _GitHub repository: https://github.com/icatproject/python-icat
.. _PEP 440: https://www.python.org/dev/peps/pep-0440/
.. _Semantic Versioning: https://semver.org/
