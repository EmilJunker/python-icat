Index: icat/icatcheck.py
===================================================================
--- icat/icatcheck.py	(revision 254)
+++ icat/icatcheck.py	(working copy)
@@ -261,7 +261,7 @@
     def _genealogy(self, rules):
         """Set up the genealogy of entity types."""
 
-        tree = { t:{'level':0, 'base':None} for t in self.schema.keys() }
+        tree = dict([ (t,{'level':0, 'base':None}) for t in self.schema.keys() ])
         for t in tree:
             log.debug("checking ancestors of %s ...", t)
             for r in rules:
@@ -328,7 +328,7 @@
         except GenealogyError as e:
             log.error("%s Dropping class genealogy in Python output.", 
                       e.args[0])
-            tree = { t:{'level':0, 'base':None} for t in self.schema.keys() }
+            tree = dict([ (t,{'level':0, 'base':None}) for t in self.schema.keys() ])
         else:
             base = [t for t in tree if tree[t]['base'] is None][0]
             self.schema[base].classname = baseclassname
Index: doc/examples/icatdump.py
===================================================================
--- doc/examples/icatdump.py	(revision 254)
+++ doc/examples/icatdump.py	(working copy)
@@ -205,7 +205,7 @@
     # entities, reindex is set to the list of attributes that shall
     # dertermine the sort order.
     if reindex:
-        idindex = { i:k for k,i in keyindex.iteritems() }
+        idindex = dict([ (i,k) for k,i in keyindex.iteritems() ])
         ds = {}
         keys = d.keys()
         keys.sort(key = lambda k: [d[k][a] for a in reindex]+[k])
Index: doc/examples/ldapsync.py
===================================================================
--- doc/examples/ldapsync.py	(revision 206)
+++ doc/examples/ldapsync.py	(working copy)
@@ -32,7 +32,7 @@
 client = icat.Client(conf.url, **conf.client_kwargs)
 client.login(conf.auth, conf.credentials)
 
-icatuser = { u.name:u for u in client.search("User") }
+icatuser = dict([ (u.name,u) for u in client.search("User") ])
 
 
 ldapclient = ldap.initialize(conf.ldap_uri)
