Index: icat/icatcheck.py
===================================================================
--- icat/icatcheck.py	(revision 272)
+++ icat/icatcheck.py	(working copy)
@@ -258,7 +258,7 @@
     def _genealogy(self, rules):
         """Set up the genealogy of entity types."""
 
-        tree = { t:{'level':0, 'base':None} for t in self.schema.keys() }
+        tree = dict([ (t,{'level':0, 'base':None}) for t in self.schema.keys() ])
         for t in tree:
             log.debug("checking ancestors of %s ...", t)
             for r in rules:
@@ -325,7 +325,7 @@
         except GenealogyError as e:
             log.error("%s Dropping class genealogy in Python output.", 
                       e.args[0])
-            tree = { t:{'level':0, 'base':None} for t in self.schema.keys() }
+            tree = dict([ (t,{'level':0, 'base':None}) for t in self.schema.keys() ])
         else:
             base = [t for t in tree if tree[t]['base'] is None][0]
             self.schema[base].classname = baseclassname
Index: icat/chunkedhttp.py
===================================================================
--- icat/chunkedhttp.py	(revision 412)
+++ icat/chunkedhttp.py	(working copy)
@@ -69,7 +69,7 @@
         """
         if message_body is not None:
             chunksize = getattr(self, 'chunksize', self.default_chunk_size)
-            if isinstance(message_body, type(b'')):
+            if isinstance(message_body, type('')):
                 bodyiter = stringiterator(message_body, chunksize)
             elif isinstance(message_body, type(u'')):
                 bodyiter = stringiterator(message_body.encode('ascii'), 
@@ -83,8 +83,8 @@
                                 "or an iterable")
             for chunk in bodyiter:
                 self.send(hex(len(chunk))[2:].encode('ascii') 
-                          + b"\r\n" + chunk + b"\r\n")
-            self.send(b"0\r\n\r\n")
+                          + "\r\n" + chunk + "\r\n")
+            self.send("0\r\n\r\n")
 
 class ChunkedHTTPConnection(ChunkedHTTPConnectionMixin, HTTPConnection):
     pass
Index: icat/dumpfile_xml.py
===================================================================
--- icat/dumpfile_xml.py	(revision 522)
+++ icat/dumpfile_xml.py	(working copy)
@@ -93,8 +93,8 @@
         super(XMLDumpFileReader, self).__init__(client, infile)
         # need binary mode for infile
         self.infile = os.fdopen(os.dup(infile.fileno()), 'rb')
-        self.insttypemap = { c.BeanName:t 
-                             for t,c in self.client.typemap.iteritems() }
+        self.insttypemap = dict([ (c.BeanName,t) 
+                                  for t,c in self.client.typemap.iteritems() ])
 
     def getdata(self):
         """Iterate over the data chunks in the dump file.
@@ -138,7 +138,7 @@
         etree.SubElement(head, "apiversion").text = str(self.client.apiversion)
         etree.SubElement(head, "generator").text = ("icatdump (python-icat %s)" 
                                                     % icat.__version__)
-        self.outfile.write(b"""<?xml version="1.0" encoding="utf-8"?>
+        self.outfile.write("""<?xml version="1.0" encoding="utf-8"?>
 <icatdump>
 """)
         self.outfile.write(etree.tostring(head, pretty_print=True))
@@ -162,7 +162,7 @@
     def finalize(self):
         """Finalize the dump file."""
         self.startdata()
-        self.outfile.write(b"</icatdump>\n")
+        self.outfile.write("</icatdump>\n")
         self.outfile.close()
 
 
Index: icat/dumpfile_yaml.py
===================================================================
--- icat/dumpfile_yaml.py	(revision 522)
+++ icat/dumpfile_yaml.py	(working copy)
@@ -131,8 +131,8 @@
 
     def __init__(self, client, infile):
         super(YAMLDumpFileReader, self).__init__(client, infile)
-        self.insttypemap = { c.BeanName:t 
-                             for t,c in self.client.typemap.iteritems() }
+        self.insttypemap = dict([ (c.BeanName,t) 
+                                  for t,c in self.client.typemap.iteritems() ])
 
     def getdata(self):
         """Iterate over the data chunks in the dump file.
Index: icatdump.py
===================================================================
--- icatdump.py	(revision 612)
+++ icatdump.py	(working copy)
@@ -83,71 +83,71 @@
 
 # Compatibility ICAT 4.3.* vs. ICAT 4.4.0 and later: include
 # InvestigationGroups.
-inv_includes = { "facility", "type.facility", "investigationInstruments", 
-                 "investigationInstruments.instrument.facility", "shifts", 
-                 "keywords", "publications", "investigationUsers", 
-                 "investigationUsers.user", "parameters", 
-                 "parameters.type.facility" }
+inv_includes = set([ "facility", "type.facility", "investigationInstruments", 
+                     "investigationInstruments.instrument.facility", "shifts", 
+                     "keywords", "publications", "investigationUsers", 
+                     "investigationUsers.user", "parameters", 
+                     "parameters.type.facility" ])
 if client.apiversion > '4.3.99':
-    inv_includes |= { "investigationGroups", "investigationGroups.grouping" }
+    inv_includes |= set([ "investigationGroups", "investigationGroups.grouping" ])
 
 
 authtypes =   [Query(client, "User", order=True), 
                Query(client, "Grouping", order=True, 
-                     includes={"userGroups", "userGroups.user"}),
+                     includes=set(["userGroups", "userGroups.user"])),
                Query(client, "Rule", order=["what", "id"], 
                      conditions={"grouping":"IS NULL"}), 
                Query(client, "Rule", order=["grouping.name", "what", "id"], 
                      conditions={"grouping":"IS NOT NULL"}, 
-                     includes={"grouping"}), 
+                     includes=set(["grouping"])), 
                Query(client, "PublicStep", order=True) ]
 statictypes = [Query(client, "Facility", order=True), 
                Query(client, "Instrument", order=True, 
-                     includes={"facility", "instrumentScientists.user"}), 
+                     includes=set(["facility", "instrumentScientists.user"])), 
                Query(client, "ParameterType", order=True, 
-                     includes={"facility", "permissibleStringValues"}), 
+                     includes=set(["facility", "permissibleStringValues"}), 
                Query(client, "InvestigationType", order=True, 
-                     includes={"facility"}), 
+                     includes=set(["facility"])), 
                Query(client, "SampleType", order=True, 
-                     includes={"facility"}), 
+                     includes=set(["facility"])), 
                Query(client, "DatasetType", order=True, 
-                     includes={"facility"}), 
+                     includes=set(["facility"])), 
                Query(client, "DatafileFormat", order=True, 
-                     includes={"facility"}), 
+                     includes=set(["facility"])), 
                Query(client, "FacilityCycle", order=True, 
-                     includes={"facility"}), 
+                     includes=set(["facility"])), 
                Query(client, "Application", order=True, 
-                     includes={"facility"}) ]
+                     includes=set(["facility"])) ]
 investtypes = [Query(client, "Investigation", 
                      conditions={"id":"in (%d)"}, 
                      includes=inv_includes), 
                Query(client, "Sample", order=["name"], 
                      conditions={"investigation.id":"= %d"}, 
-                     includes={"investigation", "type.facility", 
-                               "parameters", "parameters.type.facility"}), 
+                     includes=set(["investigation", "type.facility", 
+                                   "parameters", "parameters.type.facility"])), 
                Query(client, "Dataset", order=["name"], 
                      conditions={"investigation.id":"= %d"}, 
-                     includes={"investigation", "type.facility", 
-                               "sample", "parameters.type.facility"}), 
+                     includes=set(["investigation", "type.facility", 
+                                   "sample", "parameters.type.facility"])), 
                Query(client, "Datafile", order=["dataset.name", "name"], 
                      conditions={"dataset.investigation.id":"= %d"}, 
-                     includes={"dataset", "datafileFormat.facility", 
-                               "parameters.type.facility"}) ]
+                     includes=set(["dataset", "datafileFormat.facility", 
+                                   "parameters.type.facility"])) ]
 othertypes =  [Query(client, "Study", order=True, 
-                     includes={"user", "studyInvestigations", 
-                               "studyInvestigations.investigation"}), 
+                     includes=set(["user", "studyInvestigations", 
+                                   "studyInvestigations.investigation"])), 
                Query(client, "RelatedDatafile", order=True, 
-                     includes={"sourceDatafile.dataset.investigation.facility", 
-                               "destDatafile.dataset.investigation.facility"}), 
+                     includes=set(["sourceDatafile.dataset.investigation.facility", 
+                                   "destDatafile.dataset.investigation.facility"])), 
                Query(client, "DataCollection", order=True, 
-                     includes={("dataCollectionDatasets.dataset."
-                                "investigation.facility"), 
-                               ("dataCollectionDatafiles.datafile.dataset."
-                                "investigation.facility"), 
-                               "%s.type" % datacolparamname}), 
+                     includes=set([("dataCollectionDatasets.dataset."
+                                    "investigation.facility"), 
+                                   ("dataCollectionDatafiles.datafile.dataset."
+                                    "investigation.facility"), 
+                                   "%s.type" % datacolparamname])), 
                Query(client, "Job", order=True, 
-                     includes={"application.facility", 
-                               "inputDataCollection", "outputDataCollection"})]
+                     includes=set(["application.facility", 
+                                   "inputDataCollection", "outputDataCollection"]))]
 
 with open_dumpfile(client, conf.file, conf.format, 'w') as dumpfile:
     dumpfile.writedata(authtypes)
Index: doc/examples/init-icat.py
===================================================================
--- doc/examples/init-icat.py	(revision 633)
+++ doc/examples/init-icat.py	(working copy)
@@ -69,10 +69,10 @@
 
 # Public tables that may be read by anybody.  Basically anything thats
 # static and not related to any particular investigation.
-pubtables = { "Application", "DatafileFormat", "DatasetType", 
-              "Facility", "FacilityCycle", "Instrument", 
-              "InvestigationType", "ParameterType", 
-              "PermissibleStringValue", "SampleType", "User", }
+pubtables = set([ "Application", "DatafileFormat", "DatasetType", 
+                  "Facility", "FacilityCycle", "Instrument", 
+                  "InvestigationType", "ParameterType", 
+                  "PermissibleStringValue", "SampleType", "User", ])
 
 # Objects that useroffice might need to create.  Basically anything
 # related to a particular investigation as a whole, but not to
@@ -83,10 +83,10 @@
 # based InvestigationGroup.  In this case, we have a fixed set of
 # static rules.  With older ICAT versions, we need per investigation
 # rules and thus useroffice need permission to create them.
-uotables = { "FacilityCycle", groupname, "InstrumentScientist", 
-             "Investigation", "InvestigationParameter", 
-             "InvestigationUser", "Keyword", "Publication", "Shift", 
-             "Study", "StudyInvestigation", "User", "UserGroup", }
+uotables = set([ "FacilityCycle", groupname, "InstrumentScientist", 
+                 "Investigation", "InvestigationParameter", 
+                 "InvestigationUser", "Keyword", "Publication", "Shift", 
+                 "Study", "StudyInvestigation", "User", "UserGroup", ])
 if client.apiversion > '4.2.99':
     uotables.add("InvestigationInstrument")
 if client.apiversion > '4.3.99':
@@ -107,7 +107,7 @@
 # Grant public read permission to some basic tables.  Note that the
 # created rules do not refer to any group.  That means they will apply
 # to anybody.  SampleType is a special case, dealt with below.
-client.createRules("R", pubtables - {"SampleType"})
+client.createRules("R", pubtables - set(["SampleType"]))
 
 # Special rule: each user gets the permission to see the groups he
 # is in.
@@ -119,7 +119,7 @@
 # simple by giving him read all permissions.
 idsreader = client.createUser("idsreader", fullName="IDS reader")
 rallgroup = client.createGroup("rall", [ idsreader ])
-client.createRules("R", alltables - pubtables - {"Log"}, rallgroup)
+client.createRules("R", alltables - pubtables - set(["Log"]), rallgroup)
 
 # Setup permissions for useroffice.  They need to create
 # Investigations and to setup access permissions for them.  Note that
Index: doc/examples/ldapsync.py
===================================================================
--- doc/examples/ldapsync.py	(revision 263)
+++ doc/examples/ldapsync.py	(working copy)
@@ -31,7 +31,7 @@
 client = icat.Client(conf.url, **conf.client_kwargs)
 client.login(conf.auth, conf.credentials)
 
-icatuser = { u.name:u for u in client.search("User") }
+icatuser = dict([ (u.name,u) for u in client.search("User") ])
 
 
 ldapclient = ldap.initialize(conf.ldap_uri)
Index: doc/examples/dumpinvestigation.py
===================================================================
--- doc/examples/dumpinvestigation.py	(revision 612)
+++ doc/examples/dumpinvestigation.py	(working copy)
@@ -93,12 +93,12 @@
              "<-> Investigation [id=%d]"), ]
 
 # The set of objects to be included in the Investigation.
-inv_includes = { "facility", "type.facility", "investigationInstruments", 
-                 "investigationInstruments.instrument.facility", "shifts", 
-                 "keywords", "publications", "investigationUsers", 
-                 "investigationUsers.user", "investigationGroups", 
-                 "investigationGroups.grouping", "parameters", 
-                 "parameters.type.facility" }
+inv_includes = set([ "facility", "type.facility", "investigationInstruments", 
+                     "investigationInstruments.instrument.facility", "shifts", 
+                     "keywords", "publications", "investigationUsers", 
+                     "investigationUsers.user", "investigationGroups", 
+                     "investigationGroups.grouping", "parameters", 
+                     "parameters.type.facility" ])
 
 # The following lists control what ICAT objects are written in each of
 # the dumpfile chunks.  There are three options for the items in each
@@ -131,16 +131,16 @@
                      includes=inv_includes), 
                Query(client, "Sample", order=["name"], 
                      conditions={"investigation.id":"= %d" % invid}, 
-                     includes={"investigation", "type.facility", 
-                               "parameters", "parameters.type.facility"}), 
+                     includes=set(["investigation", "type.facility", 
+                                   "parameters", "parameters.type.facility"])), 
                Query(client, "Dataset", order=["name"], 
                      conditions={"investigation.id":"= %d" % invid}, 
-                     includes={"investigation", "type.facility", "sample", 
-                               "parameters", "parameters.type.facility"}), 
+                     includes=set(["investigation", "type.facility", "sample", 
+                                   "parameters", "parameters.type.facility"])), 
                Query(client, "Datafile", order=["dataset.name", "name"], 
                      conditions={"dataset.investigation.id":"= %d" % invid}, 
-                     includes={"dataset", "datafileFormat.facility", 
-                               "parameters", "parameters.type.facility"})]
+                     includes=set(["dataset", "datafileFormat.facility", 
+                                   "parameters", "parameters.type.facility"]))]
 
 with open_dumpfile(client, conf.file, conf.format, 'w') as dumpfile:
     dumpfile.writedata(authtypes)
Index: doc/examples/querytest.py
===================================================================
--- doc/examples/querytest.py	(revision 617)
+++ doc/examples/querytest.py	(working copy)
@@ -78,12 +78,12 @@
 print("%d result(s)" % len(client.search(str(q) % df)))
 
 print("\nQuery lots of information about one single investigation.")
-includes = { "facility", "type.facility", "investigationInstruments", 
-             "investigationInstruments.instrument.facility", "shifts", 
-             "keywords", "publications", "investigationUsers", 
-             "investigationUsers.user", "investigationGroups", 
-             "investigationGroups.grouping", "parameters", 
-             "parameters.type.facility" }
+includes = set([ "facility", "type.facility", "investigationInstruments", 
+                 "investigationInstruments.instrument.facility", "shifts", 
+                 "keywords", "publications", "investigationUsers", 
+                 "investigationUsers.user", "investigationGroups", 
+                 "investigationGroups.grouping", "parameters", 
+                 "parameters.type.facility" ])
 q = Query(client, "Investigation", 
           conditions={"id":"= %d" % invid}, includes=includes)
 print(str(q))
@@ -94,7 +94,7 @@
           order=["name"], 
           conditions={ "investigationInstruments.investigation.id":
                        "= %d" % invid }, 
-          includes={"facility", "instrumentScientists.user"})
+          includes=set(["facility", "instrumentScientists.user"]))
 print(str(q))
 print("%d result(s)" % len(client.search(q)))
 
@@ -101,8 +101,8 @@
 print("\nThe datafiles related to a given investigation in natural order.")
 q = Query(client, "Datafile", order=True, 
           conditions={ "dataset.investigation.id":"= %d" % invid }, 
-          includes={"dataset", "datafileFormat.facility", 
-                    "parameters.type.facility"})
+          includes=set(["dataset", "datafileFormat.facility", 
+                        "parameters.type.facility"]))
 print(str(q))
 print("%d result(s)" % len(client.search(q)))
 
@@ -109,8 +109,8 @@
 print("\nSame example, but skip the investigation in the order.")
 q = Query(client, "Datafile", order=['dataset.name', 'name'], 
           conditions={ "dataset.investigation.id":"= %d" % invid }, 
-          includes={"dataset", "datafileFormat.facility", 
-                    "parameters.type.facility"})
+          includes=set(["dataset", "datafileFormat.facility", 
+                        "parameters.type.facility"]))
 print(str(q))
 print("%d result(s)" % len(client.search(q)))
 
Index: setup.py
===================================================================
--- setup.py	(revision 413)
+++ setup.py	(working copy)
@@ -14,10 +14,6 @@
     raise RuntimeError("Sorry, this Python version (%s) is too old to use "
                        "this package." % sys.version)
 
-if sys.version_info < (2, 7):
-    raise RuntimeError("You are using Python %s.\n"
-                       "Please apply python2_6.patch first." % sys.version)
-
 DOCLINES         = icatinfo.__doc__.split("\n")
 DESCRIPTION      = DOCLINES[0]
 LONG_DESCRIPTION = "\n".join(DOCLINES[2:])
