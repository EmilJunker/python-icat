		  History of changes to python-icat
		  =================================

* Version 0.7.0 (2015-02-??)

** New features

 + Add a module icat.query with a class Query that can be used to
   build ICAT search expressions.  Instances of the class may be used
   in place of search expression strings where appropriate.

 + Add a class method getNaturalOrder() to Entity that returns a list
   of attributes suitable to be used in an ORDER BY clause in an ICAT
   search expression.

 + Add a class method getAttrInfo() to Entity that queries the
   EntityInfo from the ICAT server and extracts the information on an
   attribute.

 + Add a method getEntityClass() that returns the Entity class
   corresponding to a name.

 + Add a warning class QueryNullableOrderWarning.

 + Add an optional argument username to the getLink() IDS method.

* Version 0.6.0 (2014-12-15)

** New features

 + Add support for ICAT 4.4.0: add new Entity type InvestigationGroup,
   role has been added to the constraint in InvestigationUser.

 + Add new IDSClient API method getApiVersion() that will be
   introduced with the upcoming version 1.3.0 of IDS.  This method may
   also be called with older IDS servers: if it is not available
   because the server does not support it yet, the server version is
   guessed from visible features in the API.

   IDSClient checks the API version on init.

 + Add new IDSClient API methods isReadOnly(), isTwoLevel(),
   getLink(), and getSize() introduced with IDS 1.2.0.

 + Add no_proxy support.  The proxy configuration variables,
   http_proxy, https_proxy, and no_proxy are set in the environment.
   [Suggested by Alistair Mills]

 + Rework the dump file backend API for icatdump and icatrestore.  As
   a result, writing custom dump or restore scripts is much cleaner
   and easier now.

   This may cause compatibility issues for users who either wrote
   their own dump file backend or for users who wrote custom dump or
   restore scripts, using the XML or YAML backends.  In the first
   case, compare the old XML and YAML backends with the new versions
   and you'll easily see what needs to get adapted.  In the latter
   case, have a look into the new versions of icatdump and icatrestore
   to see how to use the new backend API.

 + Add method searchChunked() to Client.

 + Add method getAttrType() to Entity.

** Incompatible changes

 + Move the group argument to the Client method createRules() to the
   last position and make it optional, having default None.

   In the client code, replace:

   client.createRules(group, crudFlags, what)

   by

   client.createRules(crudFlags, what, group)

 + The Client method putData() returns the new Datafile object created
   by IDS rather then only its id.

   If you depend on the old behavior in the client code, replace:

   dfid = client.putData(file, datafile)

   by

   df = client.putData(file, datafile)
   dfid = df.id

** Minor changes and fixes

 + The searchText() and luceneSearch() client method have been
   deprecated.  They are destined to be dropped from the ICAT server
   or at least changed in version 4.5.0 and might get removed from
   python-icat in a future release as well.

   The methods now emit a deprecation warning when called.  Note
   however that Python by default ignores deprecation warnings, so you
   won't see this unless you switch them on.

 + Fixed overly strict type checking in the constructor arguments of
   DataSelection and as a consequence also in the arguments of the
   ICAT client methods getData(), getDataUrl(), prepareData(), and
   deleteData(): now, any Sequence of entity objects will be accepted,
   in particular an EntityList.

 + Change IDSClient API methods archive() and restore() to not to
   return anything.  While formally, this might be considered an
   incompatible change, these methods never returned anything
   meaningful in the past.

 + Slightly modified the "==" and "!=" operator for Entity objects.
   Add a   hash  () method to the Entity class.  The latter means
   that you will more likely get what you expect when you create a
   set of Entity objects or use them as keys in a dict.

 + The module icat.eval now only does its work (parsing command line
   arguments and connecting to an ICAT server) when called from the
   Python command line.  When imported as a regular module, it will
   essentially do nothing.  This avoids errors to occur when imported.

 + setup.py raises an error with Python 2.6 if python2_6.patch has not
   been applied.

 + Add missing MANIFEST.in in the source distribution.

 + Remove the work around the Suds datetime value bug (setting the
   environment variable TZ to "UTC") from   init  .py.  Instead,
   document it along with other known issues in the README.

 + Minor fixes in the sorting of entity objects.

 + Add an optional argument args to Config.getconfig().  If set to a
   list of strings, it replaces sys.argv.  Mainly useful for testing.

 + Add comparison operators to class ListProxy.

* Version 0.5.1 (2014-07-07)

 + Add a module icat.eval that is intended to be run using the "-m"
   command line switch to Python.  It allows to evaluate Python
   expressions within an ICAT session as one liners directly from the
   command line, as for example:

     # get all Dataset ids
     $ python -m icat.eval -e 'client.search("Dataset.id")' -s root
     [102284L, 102288L, 102289L, 102293L]

 + Fix an issue in the error handling in the IDS client that caused an
   urllib2.HTTPError to be raised instead of an IDSServerError in the
   case of an error from the IDS server and thus the loss of all
   details about the error reported in the reply from the server.

 + Add specific exception classes for the different error codes raised
   by the IDS server.

 + Fix compatibility issue with Python 3.3 that caused the HTTP method
   to be set to "None" in some IDS methods, which in turn caused an
   internal server error to be raised in the IDS server.

 + Fix compatibility issues with Python 3.4: some methods have been
   removed from class urllib.request.Request which caused an
   AttributeError in the IDSClient.

 + Fix: failed to connect to an ICAT server if it advertises a version
   number having a trailing "-SNAPSHOT" in getApiVersion().  For
   compatibility, a trailing "-SNAPSHOT" will be replaced by "a1" in
   the client.apiversion attribute.

 + Suppress misleading context information introduced with Python 3
   (PEP 3134) from the traceback in some error messages.
   Unfortunately, the fix only works for Python 3.3 and newer.

 + Make example files compatible across Python versions without
   modifications, such as running 2to3 on them.

* Version 0.5.0 (2014-06-24)

 + Integrate an IDS client in the ICAT client.

 + Improved icatdump.py and icatrestore.py:

   - Changed the logical structure of the dump file format which
     significantly simplified the scripts.  Note that old dump files
     are not compatible with the new versions.

   - Add support for XML dump files.  A XML Schema Definition for the
     dump file format is provided in the doc directory.

   The scripts are now considered to be legitimate tools (though still
   alpha) rather then mere examples.  Consequently, they will be
   installed into the bin directory.

 + Implicitly set a one to many relation to an empty list if it is
   accessed but not present in an Entity object rather then raising an
   AttributeError.  See ICAT Issue 130.

 + Allow setting one to many relationship attributes and deletion of
   attributes in Entity.  Add method truncateRelations() to Entity.
   Truncate dummy relations set by the factory in newly created entity
   objects.

 + Cache the result from getEntityInfo() in the client.

 + Add a method Entity.__sortkey__() that return a key that when used
   as a sorting key in list.sort() allows any list of entity objects
   to have a well defined order.  Sorting is based on the Constraint
   attributes.  Add a class variable SortAttrs that overrides this and
   will be set as a fall back for those entity classes that do not
   have a suitable Constraint.

* Version 0.4.0 (2014-02-11)

 + Add support for the jurko fork of Suds [1] and for Python 3.

 + Add a new method Client.searchUniqueKey().

 + Add an optional argument keyindex to method Entity.getUniqueKey()
   that is used as a cache of previously generated keys.  Remove the
   argument addbean.  addbean had been documented as for internal use
   only, so this is not considered an incompatible change.

 + Add a new exception class DataConsistencyError.  Raise
   DataConsistencyError in Entity.getUniqueKey() if a relation that is
   required in a constraint is not set.

 + Rename SearchResultError to SearchAssertionError.
   SearchResultError was a misnomer here, as this exception class is
   very specific to Client.assertedSearch().  Add a new generic
   exception class SearchResultError and derive SearchAssertionError
   from it.  This way, the change should not create any compatibility
   problems in client programs.

 + Add a check in icatcheck that the ICATErrors as defined in
   icat.exceptions are in sync with icatExceptionType as defined in
   the schema.

 + Bugfix: The code dealing with exceptions raised by the ICAT server
   did require all attributes in IcatException sent by the server to
   be set, although some of these attributes are marked as optional in
   the schema.

 + Do not delete the Suds cache directory in Client.cleanup().  

 + Installation: python-icat requires Python 2.6 or newer.  Raise an
   error if setup.py is run by a too old Python version.

 + Move some internal routines in a separate module icat.helper.

 + Greatly improved example scripts icatdump.py and icatrestore.py.

* Version 0.3.0 (2014-01-10)

 + Add support for ICAT 4.3.1.  (Compatibility with ICAT 4.3.2 has
   also been tested but did not require any changes.)

 + Implement alias names for entity attributes.  This facilitates
   compatibility of client programs to different ICAT versions.
   E.g. a client program may use rule.grouping regardless of the ICAT
   version, for ICAT 4.2.* this is aliased to rule.group.

 + Add a client method assertedSearch().

 + Add a method getUniqueKey() for all entities.

 + Add entity methods Group.getUsers() and
   Instrument.getInstrumentScientists().

 + WARNING, incompatible change!
   Changed entity methods Instrument.addInstrumentScientist() and
   Investigation.addInvestigationUser() to not to create the
   respective user any more, but rather expect a list of existing
   users as argument.  Renamed Group.addUser(),
   Instrument.addInstrumentScientist(), and
   Investigation.addInvestigationUser() to addUsers(),
   addInstrumentScientists(), and addInvestigationUsers() (note the
   plural "s") respectively.

   In the client code, replace:

   pi = investigation.addInvestigationUser(uid, fullName=userName, 
                                           search=True, 
                                           role="Principal Investigator")

   by

   pi = client.createUser(uid, fullName=userName, search=True)
   investigation.addInvestigationUsers([pi], role="Principal Investigator")

 + Work around a bug in the way SUDS deals with datetime values: set
   the local time zone to UTC.

 + Add example scripts icatdump.py and icatrestore.py.

* Version 0.2.0 (2013-11-18)

 + Rework internals of icat.config.

 + Bugfix: Config required a password to be set even if prompt for
   password was requested.

 + Add support for configuration via environment variables.

 + Add support of HTTP proxy settings.  [Suggested by Alistair Mills]

 + WARNING, incompatible change!
   The configuration read by icat.config is not stored as attributes
   on the Config object itself, but rather getconf() returns an object
   with these attributes set.  This keeps the configuration values
   cleanly separated from the attributes of the Config object.

   In the client code, replace:

   conf = icat.config.Config()
   conf.getconfig()

   by

   config = icat.config.Config()
   conf = config.getconfig()

 + Move ConfigError from icat.config to icat.exception.

 + Move GenealogyError from icat.icatcheck to icat.exception.

 + Review export of symbols.  Most client programs should only need to
   import icat and icat.config.

* Version 0.1.0 (2013-11-01)

 + Initial version

* References

[1] https://bitbucket.org/jurko/suds/


# Local Variables:
# mode: org
# End:
